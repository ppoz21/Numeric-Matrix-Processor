type: edu
custom_name: stage2
files:
- name: tests.py
  visible: false
  text: |
    import string
    from collections import namedtuple

    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    TestClue = namedtuple("TestClue", ["answer", "feedback"])


    class CalcTest(StageTest):
        ERROR_STRING = "ERROR"

        def generate(self) -> List[TestCase]:
            return [
                TestCase(
                    stdin=
                    '3 3\n'
                    '1 2 3\n'
                    '4 5 6\n'
                    '7 8 9\n'
                    '3\n'
                    ,
                    attach=TestClue(
                        answer=
                        '3 6 9\n'
                        '12 15 18\n'
                        '21 24 27\n'
                        ,
                        feedback=
                        ''
                    )
                ),
                TestCase(
                    stdin=
                    '2 3\n'
                    '1 2 3\n'
                    '4 5 6\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '0 0 0\n'
                        '0 0 0\n'
                        ,
                        feedback=
                        ''
                    )
                ),
                TestCase(
                    stdin=
                    '5 5\n'
                    '1 4 6 7 8\n'
                    '1 9 5 2 2\n'
                    '1 4 3 5 7\n'
                    '1 4 6 4 1\n'
                    '1 4 5 7 1\n'
                    '5\n'
                    ,
                    attach=TestClue(
                        answer=
                        '5 20 30 35 40\n'
                        '5 45 25 10 10\n'
                        '5 20 15 25 35\n'
                        '5 20 30 20 5\n'
                        '5 20 25 35 5\n'
                        ,
                        feedback=
                        ''
                    )
                ),
                TestCase(
                    stdin=
                    '1 1\n'
                    '1\n'
                    '1\n'
                    ,
                    attach=TestClue(
                        answer=
                        '1\n'
                        ,
                        feedback=
                        ''
                    )
                ),
                TestCase(
                    stdin=
                    '1 1\n'
                    '0\n'
                    '1\n'
                    ,
                    attach=TestClue(
                        answer=
                        '0\n'
                        ,
                        feedback=
                        ''
                    )
                ),
                TestCase(
                    stdin=
                    '3 2\n'
                    '1 2\n'
                    '8 1\n'
                    '9 1\n'
                    '10\n'
                    ,
                    attach=TestClue(
                        answer=
                        '10 20\n'
                        '80 10\n'
                        '90 10\n'
                        ,
                        feedback=
                        ''
                    )
                ),
            ]

        def is_equal_matrices(self, actual: list, expected: list) -> bool:
            if len(actual) != len(expected):
                return False
            for actual_line, expected_line in zip(actual, expected):
                if len(actual_line) != len(expected_line):
                    return False
                else:
                    for actual, expected in zip(actual_line, expected_line):
                        if abs(float(actual) - float(expected)) > 0.01:
                            return False
            return True

        def check(self, reply: str, attach) -> CheckResult:
            reply = reply.strip()
            answer = str(attach.answer).strip()
            if reply == self.ERROR_STRING:
                return CheckResult(answer == self.ERROR_STRING, attach.feedback)
            else:
                characters = set(string.ascii_lowercase)
                actual = [line.split() for line in reply.splitlines() if line and characters.isdisjoint(line)]
                expected = list(map(str.split, answer.split("\n")))
                return CheckResult(self.is_equal_matrices(expected, actual), attach.feedback)


    if __name__ == '__main__':
        CalcTest("processor.processor").run_tests()
  learner_created: false
- name: processor/processor.py
  visible: true
  text: |
    class Matrix:
        """Class for matrix"""
        def __init__(self, n, m):
            self.rows = int(n)
            self.columns = int(m)
            self.matrix = []
            self.read_matrix()

        def read_matrix(self):
            for i in range(self.rows):
                row = input().split()
                self.matrix.append([])
                for j in range(self.columns):
                    self.matrix[i].append(int(row[j]))

        def add_matrices(self, matrix):
            n = self.rows
            m = self.columns
            elements = []
            for i in range(self.rows):
                for j in range(self.columns):
                    elements.append(self.matrix[i][j] + matrix.matrix[i][j])
            return MatrixFromAddition(n, m, *elements)

        def show_matrix(self):
            for row in range(self.rows):
                for column in range(self.columns):
                    print(self.matrix[row][column], sep=" ", end=" ")
                print("\n")


    class MatrixFromAddition(Matrix):
        def __init__(self, n, m, *elements):
            self.rows = int(n)
            self.columns = int(m)
            self.matrix = []
            self.create_matrix(elements)

        def create_matrix(self, elements):
            k = 0
            for i in range(self.rows):
                self.matrix.append([])
                for j in range(self.columns):
                    self.matrix[i].append(elements[k])
                    k += 1


    n1, m1 = input().split(" ")
    matrix1 = Matrix(n1, m1)

    n2, m2 = input().split(" ")
    matrix2 = Matrix(n2, m2)

    if n1 == n2 and m1 == m2:
        addition_matrix = matrix1.add_matrices(matrix2)
        addition_matrix.show_matrix()
    else:
        print("ERROR")
  learner_created: true
feedback_link: https://hyperskill.org/projects/96/stages/529/implement
status: Solved
record: -1
